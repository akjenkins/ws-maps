{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MapContainer","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","inherits","createClass","key","value","react_default","a","createElement","dist","google","initialCenter","lat","lng","zoom","name","position","onClick","visible","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","Component","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAQaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAQRQ,cAAgB,SAACR,EAAOS,EAAQC,GAAhB,OAChBT,EAAKU,SAAS,CACZC,cAAeZ,EACfa,aAAcJ,EACdK,mBAAmB,KAbFb,EAgBnBc,QAAU,SAAAf,GACJC,EAAKe,MAAMF,mBACbb,EAAKU,SAAS,CACZG,mBAAmB,EACnBD,aAAc,QAlBlBZ,EAAKe,MAAQ,CACTF,mBAAmB,EACnBD,aAAc,GACdD,cAAe,IALFX,EADrB,OAAAC,OAAAe,EAAA,EAAAf,CAAAJ,EAAAC,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAA,EAAAqB,IAAA,SAAAC,MAAA,WAiCI,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACEC,OAAQrB,KAAKJ,MAAMyB,OACnBC,cAAe,CACbC,IAAK,QACLC,KAAM,SAERC,KAAM,IAENR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACIM,KAAM,qCACNC,SAAU,CAACJ,IAAK,QAASC,KAAM,SAC/BI,QAAS5B,KAAKI,gBAElBa,EAAAC,EAAAC,cAACC,EAAA,WAAD,CACEf,OAAQL,KAAKY,MAAMH,aACnBoB,QAAS7B,KAAKY,MAAMF,kBACpBC,QAASX,KAAKW,SACdM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKnB,KAAKY,MAAMJ,cAAckB,QAGlCT,EAAAC,EAAAC,cAACC,EAAA,QAAD,CACEU,MA/Be,CACrB,CAACP,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,UA4BfO,YAAY,UACZC,cAAe,GACfC,aAAc,EACdC,UAAU,UACVC,YAAa,YA/DzBzC,EAAA,CAAkC0C,aAuEnBC,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZ3C,GCrEiB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea1301a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker, Polygon } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        showingInfoWindow: false, //Hides or the shows the infoWindow\r\n        activeMarker: {}, //Shows the active marker upon click\r\n        selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\r\n    }; \r\n  } \r\n  \r\n  onMarkerClick = (props, marker, e) =>\r\n  this.setState({\r\n    selectedPlace: props,\r\n    activeMarker: marker,\r\n    showingInfoWindow: true\r\n  });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const triangleCoords = [\r\n      {lat: 43.7046, lng: -72.2943}, \r\n      {lat: 43.7034, lng: -72.2886}, \r\n      {lat: 43.7091, lng: -72.2839}, \r\n      {lat: 43.7046, lng: -72.2943} \r\n    ];\r\n    return (\r\n      <div>\r\n        <h1>Hello Google Maps</h1>\r\n        <Map \r\n          google={this.props.google}\r\n          initialCenter={{\r\n            lat: 43.7044,\r\n            lng: -72.2887,\r\n          }}\r\n          zoom={16}\r\n        >\r\n          <Marker\r\n              name={'This is a marker we just made yay!'}\r\n              position={{lat: 43.7044, lng: -72.2887}}\r\n              onClick={this.onMarkerClick}\r\n          />\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n            onClose={this.onClose}>\r\n            <div>\r\n              <h2>{this.state.selectedPlace.name}</h2>\r\n            </div>\r\n          </InfoWindow>\r\n          <Polygon\r\n            paths={triangleCoords}\r\n            strokeColor=\"#0000FF\"\r\n            strokeOpacity={0.8}\r\n            strokeWeight={2}\r\n            fillColor=\"#0000FF\"\r\n            fillOpacity={0.35} \r\n          />\r\n        </Map>\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyDfm4PF2gTn64WJZcKdg_YWaFALVly2LS4'\r\n})(MapContainer);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}